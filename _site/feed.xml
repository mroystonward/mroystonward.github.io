<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-01-24T20:57:12+00:00</updated><id>http://localhost:4000/</id><title type="html">:coffee: Hot Contents</title><subtitle>Improvised &quot;musicking&quot;, workshops and &quot;things&quot; leaking out into the world.
</subtitle><author><name>Murray Royston-Ward</name></author><entry><title type="html">EOTK: Tor Mirroring on Google Cloud Engine</title><link href="http://localhost:4000/eotk-tor-mirroring-on-google-cloud-engine/" rel="alternate" type="text/html" title="EOTK: Tor Mirroring on Google Cloud Engine" /><published>2018-01-20T02:36:00+00:00</published><updated>2018-01-20T02:36:00+00:00</updated><id>http://localhost:4000/eotk-tor-mirroring-on-google-cloud-engine</id><content type="html" xml:base="http://localhost:4000/eotk-tor-mirroring-on-google-cloud-engine/">&lt;p&gt;So at the risk of this site mostly being tech stuff I’m posting another how-to, rough-guide, self-documentation regarding Tor.&lt;/p&gt;

&lt;p&gt;I hadn’t planned this as I’m currently a) meant to be completing a PhD funding application, b) should be trying to find a job and c) trying to focus on music related things rather than tech for a little while.&lt;/p&gt;

&lt;p&gt;Anyway,  &lt;a href=&quot;https://twitter.com/@moananddrone&quot;&gt;@moananddrone&lt;/a&gt; got me intrigued by the Enterprise Onion Toolkit (EOTK) &lt;a href=&quot;https://github.com/alecmuffett/eotk&quot;&gt;https://github.com/alecmuffett/eotk&lt;/a&gt; as he’s got a project requiring it and wanted me to help look at it with him.&lt;/p&gt;

&lt;p&gt;I won’t share any details of the project as Kevin will be talking about that at some point, in the future, as appropriate.&lt;/p&gt;

&lt;p&gt;Still I wanted to share my own experiences of trying out this tool and deploying it using Google’s cloud infrastructure.&lt;/p&gt;

&lt;p&gt;There are political considerations in using Google’s (or Amazon’s etc.) cloud platforms and I’m not agnostic towards such politics. I also want to keep myself educated about the various technologies in use so this seemed like a good opportunity to test out EOTK, have a play with Google’s free introduction to their cloud services, and do all of this separately to my existing Tor installation (which works well as is — I didn’t want to risk breaking my configuration with another toolset).&lt;/p&gt;

&lt;h2 id=&quot;google-cloud-platform&quot;&gt;Google Cloud Platform&lt;/h2&gt;

&lt;p&gt;I’m not really documenting this part of the process very extensively as they’re just visual web forms which are fairly self explanatory to complete and this would just be a series of screenshots which I don’t want to do. If anyone reading struggles here though and the help pages don’t answer your questions feel free to comment and ask questions.&lt;/p&gt;

&lt;p&gt;First thing was to signup to Google Cloud Platform’s free trail - &lt;a href=&quot;https://cloud.google.com/&quot;&gt;https://cloud.google.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I then created a new project and a Compute Engine VM.&lt;/p&gt;

&lt;p&gt;I’m not 100% sure what I’m doing here but I’m trying only a micro instance with Ubuntu 16.04. I also opted for European data centres simply because European data privacy laws are generally speaking considered better that US ones (a complex and contentious issue but for my current needs this simplification is appropriate).&lt;/p&gt;

&lt;p&gt;I’m not familiar with the firewall settings here either so I’ve enabled HTTP and HTTPS. We’ll see if I need to do more config later.&lt;/p&gt;

&lt;p&gt;The online SSH client is truly impressive. Just click the SSH button/link and you get a web based terminal.&lt;/p&gt;

&lt;h2 id=&quot;installing-eotk&quot;&gt;Installing EOTK&lt;/h2&gt;

&lt;p&gt;First things first:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get update

sudo apt-get dist-upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now to install EOTK&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/alecmuffett/eotk.git

cd eotk

./opt.d/install-everything-on-ubuntu-16.04.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Hopefully everything is now installed.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-an-eotk-project&quot;&gt;Setting up an EOTK Project&lt;/h2&gt;

&lt;p&gt;Lets try it, still in the &lt;code class=&quot;highlighter-rouge&quot;&gt;eotk&lt;/code&gt; folder we can run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./eotk gen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This generates an onion key file, in my case &lt;code class=&quot;highlighter-rouge&quot;&gt;u35unrkwyvkcdxsl.key&lt;/code&gt;. Copy the name of this, we’ll need it in a moment.&lt;/p&gt;

&lt;p&gt;Let’s set up a configuration file. I’m going to call it &lt;code class=&quot;highlighter-rouge&quot;&gt;mroystonward.conf&lt;/code&gt; but you should call it whatever you like but keep the &lt;code class=&quot;highlighter-rouge&quot;&gt;.conf&lt;/code&gt; at the end.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nano mroystonward.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the nano text editor we need to write the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set project mroystonward
hardmap secrets.d/u35unrkwyvkcdxsl.key mroystonward.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A few notes here. &lt;code class=&quot;highlighter-rouge&quot;&gt;mroystonward&lt;/code&gt; is the name of my project. Use here whatever you used previously.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;secrets.d/&lt;/code&gt; is the folder where eotk puts onion keys so this needs to stay the same.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;u35unrkwyvkcdxsl.key&lt;/code&gt; should be replaced with whatever onion key you generated above.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mroystonward.github.io&lt;/code&gt; is the domain I’m mirroring via Tor. You should put whatever domain you want to mirror.&lt;/p&gt;

&lt;p&gt;A few notes here though. Don’t put the &lt;code class=&quot;highlighter-rouge&quot;&gt;www&lt;/code&gt; hostname.&lt;/p&gt;

&lt;p&gt;You can do quite complex subdomain setups which I just don’t need in this example. Check the docs and video - &lt;a href=&quot;https://github.com/alecmuffett/eotk&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/watch?v=ti_VkVmE3J4&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;firing-it-up&quot;&gt;Firing it up&lt;/h2&gt;

&lt;p&gt;Now run (replacing the name of the conf file with whatever you chose earlier):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./eotk conf mroystonward.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and (with whatever project name you chose earlier):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./eotk start mroystonward
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it, it’s running. We can check the status using:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./eotk status mroystonward
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And you should see both Tor and Nginx processes listed.&lt;/p&gt;

&lt;p&gt;In Tor Browser you can now visit your onion address (mine is &lt;a href=&quot;https://u35unrkwyvkcdxsl.onion/&quot;&gt;u35unrkwyvkcdxsl.onion&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Like me you probably now encounter some errors and warnings.&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;http://localhost:4000/assets/images/insecure.png&quot; alt=&quot;SSL Warnings&quot; /&gt;
  
    &lt;figcaption&gt;Your connection is not secure
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;h2 id=&quot;ssl-certificate-problems&quot;&gt;SSL Certificate Problems&lt;/h2&gt;

&lt;p&gt;This is expected behaviour and it’s because the SSL certificates are self signed. You’ll need to click ‘advanced’ and add an exception. You may have to do this several times.&lt;/p&gt;

&lt;p&gt;There’s not a huge amount we can do about this either.&lt;/p&gt;

&lt;p&gt;Certbot/LetsEncrypt doesn’t currently support .onion domains so getting free/simple SSL isn’t an option.&lt;/p&gt;

&lt;p&gt;You currently need an SSL EV certificate which, i.e. from DigiCert, costs ~$250. For non-corporate projects this is a) expensive and b) I’m led to believe is hard to get without the proofs that accompany corporate infrastructure/incorporation etc.&lt;/p&gt;

&lt;p&gt;Depending on the nature of the site HTTPS may not be entirely necessary. This is a new area for my investigations into Tor etc. My current understanding is that the layers of encryption provided by Tor preclude the need for HTTPS on security grounds. I may be wrong here though. Feel free to comment. A HTTPS certificate does however help with proof of ownership and trust, even in an onion environment.&lt;/p&gt;

&lt;p&gt;Useful resources in starting to consider the pros and cons of HTTPS over Tor:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.eff.org/deeplinks/2012/03/https-and-tor-working-together-protect-your-privacy-and-security-online&quot;&gt;https://www.eff.org/deeplinks/2012/03/https-and-tor-working-together-protect-your-privacy-and-security-online&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.eff.org/pages/tor-and-https&quot;&gt;https://www.eff.org/pages/tor-and-https&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.torproject.org/facebook-hidden-services-and-https-certs&quot;&gt;https://blog.torproject.org/facebook-hidden-services-and-https-certs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What these resources don’t make sufficiently clear is the different ways one may choose to use Tor.&lt;/p&gt;

&lt;p&gt;You may use the Tor browser for increased privacy/anonymity whilst browsing clear-net websites (i.e. *.com, *.org, *.net, *.co.uk etc.). The EFF graphic describing the different levels of protection Tor and HTTPS together offer is referring to this kind of browsing. This is one reason the Tor browser includes (and benefits from) the HTTPS Everywhere plugin.&lt;/p&gt;

&lt;p&gt;You may also use the Tor browser to access .onion sites (as we’re setting up here). That this relies upon secure keys provides similar protections to HTTPS. You also know that only one site has this key and so when you connect to an onion domain it is almost certainly the site you think it is. You might not know who owns the site and they may not have your best interests at heart but it’s not anyone else pretending to be that site or intercepting traffic etc.&lt;/p&gt;

&lt;p&gt;Still, we now generally understand that when the browser gives us a security warning about certificates we should take this seriously. Encouraging users to just accept self-signed certificates isn’t good practice either.&lt;/p&gt;

&lt;h2 id=&quot;trying-http-only&quot;&gt;Trying HTTP Only&lt;/h2&gt;

&lt;p&gt;If we don’t need HTTPS we can add this line to the mroystonward.conf file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set force_https 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll need to stop, rerun configuration and then start your project again:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./eotk stop mroystonward

./eotk conf mroystonward.conf

./eotk start mroystonward
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whilst this is useful to note it doesn’t work for me as this entails downgrading from HTTPS to HTTP.&lt;/p&gt;

&lt;h2 id=&quot;but-dont-downgrade-from-https&quot;&gt;But Don’t Downgrade from HTTPS&lt;/h2&gt;

&lt;p&gt;Whilst I’m not yet sure of my position regarding the benefits of HTTPS over Tor for a fairly simple static website with little in the way of logins or cookies, if the original site is already HTTPS, downgrading would be considered bad practice and if there were any secure cookies and or data submission on the site we would now potentially be introducing all sorts of security holes. The EOTK developers are looking into this but for now there isn’t really any elegant solution. Tor are also considering how the Tor browser should handle onion sites with self-signed certificates.&lt;/p&gt;

&lt;p&gt;Added to this, I host &lt;a href=&quot;https://mroystonward.github.io&quot;&gt;mroystonward.github.io&lt;/a&gt; using github pages. A nice feature of this is that they enforce HTTPS. That unfortunately means that even if I set &lt;code class=&quot;highlighter-rouge&quot;&gt;force_https&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;, the part of the process which involves github serving the clear-web site to the EOTK process is all enforced in HTTPS. That means that I’m trying to downgrade to HTTP which isn’t recommended or supported as above. There are inelegant ways around this but none that are available to me as I can’t alter how github serves it’s pages.&lt;/p&gt;

&lt;h2 id=&quot;startup-scripts&quot;&gt;Startup Scripts&lt;/h2&gt;

&lt;p&gt;I also faffed around for quite sometime with startup scripts via the compute engine metadata flags but I could never get everything running properly. To save you time don’t bother. Luckily EOTK comes with a handy init script tool.&lt;/p&gt;

&lt;p&gt;Run the following commands (in the eotk folder still):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./eotk make-init-script

sudo cp eotk-init.sh /etc/init.d

sudo update-rc.d eotk-init.sh defaults
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it, it’ll now start all projects on boot.&lt;/p&gt;

&lt;h2 id=&quot;parting-thoughts&quot;&gt;Parting Thoughts&lt;/h2&gt;

&lt;p&gt;It all seems very slow to me so far (and slower than a site I directly run as a Tor service from a Raspberry Pi).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;UPDATE: Things seem a lot faster now so my speed concerns seem mostly unfounded.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I know, for example, images on the github site aren’t very optimised as a compromise for the simplicity of the static site publishing process (something I’m looking at fixing at some point). I scaled up the cloud VM to see if that made a difference and too be honest I don’t think it has so I’m sticking with the cheaper micro option for now.&lt;/p&gt;

&lt;p&gt;So, interesting exercise. If you fancy trusting my self-signed certificate you can see this in action at &lt;a href=&quot;https://u35unrkwyvkcdxsl.onion/&quot;&gt;u35unrkwyvkcdxsl.onion&lt;/a&gt;. I’ll leave it running for a while and see what happens but I doubt it’ll be up for a long-long time.&lt;/p&gt;

&lt;p&gt;I’m also impressed by how easy this was to set up on a cloud platform. It suggests the possibilities for temporary set-up/use/tear-down approaches as needs fit. One could easily clone the git repo and add in some default conf files and automate the initialisation process.&lt;/p&gt;

&lt;p&gt;Also, the options to use a small cluster of RaspberryPis and OnionBalance for all of this is super intriguing too but I don’t yet have a use case for it to justify getting more Pis - &lt;a href=&quot;https://www.youtube.com/watch?v=HNJaMNVCb-U&quot;&gt;https://www.youtube.com/watch?v=HNJaMNVCb-U&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope this helps you have a play around too.&lt;/p&gt;</content><author><name>Murray Royston-Ward</name></author><summary type="html">Setting up the Enterprise Onion Toolkit on a Compute Engine VM</summary></entry><entry><title type="html">Urghh… Recaptcha</title><link href="http://localhost:4000/urghh-recaptcha/" rel="alternate" type="text/html" title="Urghh... Recaptcha" /><published>2018-01-18T21:36:00+00:00</published><updated>2018-01-18T21:36:00+00:00</updated><id>http://localhost:4000/urghh-recaptcha</id><content type="html" xml:base="http://localhost:4000/urghh-recaptcha/">&lt;p&gt;Just a quick note. I hate captcha. Mostly I hate infinite captcha loops you can get locked into whilst browsing using Tor. That’s often as much to do with cloudflare than captchas themselves but still…&lt;/p&gt;

&lt;p&gt;I also hate that we’re basically feeding google’s AI machine learning for free when we complete a captcha. They commercialise our browsing labour for developing the kinds of algorithms that are increasingly driving society and, in the process, driving/maintaining inequalities. Google aren’t the only ones here of course (and they’re not the only captcha system either). Smash capitalism innit :punch: 🏴&lt;/p&gt;

&lt;p&gt;Anyway. I set up comments here the otherday using staticman. I opted not to enable captcha because I thought I’d see how things went and try and weather the bots if and when they came. Well 48 hrs in on a super obscure little corner of web publishing and I’m already getting daily spam comments.&lt;/p&gt;

&lt;p&gt;Stuff that!&lt;/p&gt;

&lt;p&gt;So apologies to anyone who wants to comment and shares my captcha hatred but I’ve enabled google’s reCaptcha so you’re going to have to endure clicking some cars or street signs etc.&lt;/p&gt;

&lt;p&gt;Peace out :v:&lt;/p&gt;</content><author><name>Murray Royston-Ward</name></author><summary type="html">Why I hate captchas but installed them anyway.</summary></entry><entry><title type="html">Self Hosting with Raspberry Pi and Tor</title><link href="http://localhost:4000/self-hosting-with-raspberry-pi-and-tor/" rel="alternate" type="text/html" title="Self Hosting with Raspberry Pi and Tor" /><published>2018-01-16T03:36:00+00:00</published><updated>2018-01-16T03:36:00+00:00</updated><id>http://localhost:4000/self-hosting-with-raspberry-pi-and-tor</id><content type="html" xml:base="http://localhost:4000/self-hosting-with-raspberry-pi-and-tor/">&lt;p&gt;A year or so ago I started experimenting with digital self publishing. Having become increasingly politicised with regard to both state and commercial online surveillance I also started questioning the role centralised platforms such as soundcloud and bandcamp play in independent music distribution. I’ll write more on this later — on motivations and failures in my critique/experience — but for now I wanted to talk about how I set up a Raspberry Pi webserver at home for publishing a Tor hidden service.&lt;/p&gt;

&lt;p&gt;My own project, The House Organ, is available on the ‘clearweb’ at &lt;a href=&quot;https://thehouseorgan.xyz&quot;&gt;https://thehouseorgan.xyz&lt;/a&gt;. I’ve recently moved it from github to gitlab pages and setup a custom domain for it. I’ve also maintained a Tor Hidden Service mirror of this site at &lt;a href=&quot;tho2f4fceyghjl6s.onion/&quot;&gt;tho2f4fceyghjl6s.onion/&lt;/a&gt;. The idea behind this is that the site would be censorship resistant and allow for visitors to connect with a degree of anonymity (I doubt that these are very high risks for me personally but there is a political spectrum here that I want to be engaged with). If you want to know more about what Tor is and how it works &lt;a href=&quot;https://www.torproject.org/about/overview.html.en&quot;&gt;https://www.torproject.org/about/overview.html.en&lt;/a&gt; is a good place to start. I’ll save discussion of why one would want to enagge with any of this for a later date&lt;/p&gt;

&lt;p&gt;To set up the Tor mirror I have setup a small webserver at home with the site proxied through Tor - all running on a Raspberry Pi.&lt;/p&gt;

&lt;p&gt;What follows are notes, self reminders and tips for trying this yourself. I made numerous mistakes on the way so feel free to ask if you encounter any problems, but at the same time this is a rather rough guide and not a step by step tutorial so treat it like a recipe that may need alterations to suit your tastes.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-a-raspberry-pi&quot;&gt;Setting up a Raspberry Pi&lt;/h2&gt;

&lt;p&gt;A few notes on this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We’re setting up in a basic headless server configuration so we’re not attaching a monitor and keyboard to interact with the Raspberry Pi. Instead we’ll login via the command line and execute commands. I found that this all took a bit of getting used to but has been useful training for working with servers in general.&lt;/li&gt;
  &lt;li&gt;For the above reasons I’d install Raspbian over NOOBS. Technically, seeing as NOOBS contains Raspbian, you should be able to do all of this with either, but you don’t need the extra bloat so I wouldn’t bother.&lt;/li&gt;
  &lt;li&gt;I’ve only done this with Raspberry Pi 2s and 3s. I don’t know if it’d work with a Pi zero and an older original Pi model might struggle a little bit if you run other services on it.&lt;/li&gt;
  &lt;li&gt;Whenever I’ve done this I’ve generally stuck to Ethernet so haven’t had to faff around much with WiFi. The transfer speeds on your local network are going to impact site load speeds over the Internet also so if you can use Ethernet do, but if not don’t worry about it.&lt;/li&gt;
  &lt;li&gt;Technically, we’re setting up a web server which probably violates your home ISP terms of service. If you started attracting much traffic your ISP might look at this more closely. Theoretically you could bump up to a business plan if needed but please just be aware of any risks you are placing upon yourself.&lt;/li&gt;
  &lt;li&gt;As you’re setting up a mini-web-server at home and exposing services to the outside world you should take precautions to ensure these don’t get hacked etc. Setting up passwordless login is a very good idea. It sounds like a bad idea but it relies on a cryptographic key for login so it’s a lot harder to hack than a password is. Setting up a firewall is essential and only expose the ports/services needed. Software such as fail2ban is worth implementing too, so as to block any suspicious activity.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, caveats and notes out of the way I’d recommend this guide - &lt;a href=&quot;http://blog.self.li/post/63281257339/raspberry-pi-part-1-basic-setup-without-cables&quot;&gt;http://blog.self.li/post/63281257339/raspberry-pi-part-1-basic-setup-without-cables&lt;/a&gt; - is easy to follow and covers basic security such as setting up a firewall and passwordless login.&lt;/p&gt;

&lt;p&gt;It’s likely getting a bit old now so do check the official Raspberry Pi guides etc. too.&lt;/p&gt;

&lt;h2 id=&quot;installing-tor&quot;&gt;Installing Tor&lt;/h2&gt;

&lt;p&gt;First some more caveats. We’re using Tor to serve a webpage as a hidden service. To access these hidden services visitors need to use Tor browser. Tor browser helps with anonymity and privacy but if your use case/threat model is higher then you’ll need to look into this more deeply and make habitual changes. Also, we’re running the server from home so whilst we’re hosting a ‘hidden service’ we’re not doing it in an anonymous manner. Tor has an undeserved reputation for unsavoury and illegal activities but if you were wanting to host anything remotely illegal I don’t think hosting a hidden service at home would be a very sensible way to do it. Also, on a final note, I’m based in the UK where there aren’t currently any legal restrictions on using Tor, your local situation might differ.&lt;/p&gt;

&lt;p&gt;Right, let’s get Tor installed. We need to add Tor’s package repositories.&lt;/p&gt;

&lt;p&gt;This will open a new file for us to paste in the links.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nano /etc/apt/sources.list.d/torproject.list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When I set up Raspbian it was on version Jessie so I added:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deb http://deb.torproject.org/torproject.org jessie main
deb-src http://deb.torproject.org/torproject.org jessie main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you’re on stretch etc. you can get the package details here - &lt;a href=&quot;https://www.torproject.org/docs/debian.html.en#ubuntu&quot;&gt;https://www.torproject.org/docs/debian.html.en#ubuntu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+x&lt;/code&gt; to exit and save nano.&lt;/p&gt;

&lt;p&gt;Now run these 2 commands to set-up gpg keys to validate these sources.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gpg --keyserver keys.gnupg.net --recv A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89

gpg --export A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89 | sudo apt-key add -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next we need to update the package manager:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And install Tor:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install tor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;setting-up-a-hidden-service&quot;&gt;Setting up a Hidden Service&lt;/h2&gt;

&lt;p&gt;Now we need to configure some settings in Tor. The config file is called ‘torrc’ and is located at /etc/tor/torrc&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo nano /etc/tor/torrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Underneath where it says:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;############### This section is just for location-hidden services ###
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You need to add (or uncomment/edit) the lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HiddenServiceDir /var/lib/tor/hidden_service/
HiddenServicePort 80 127.0.0.1:7658
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first line can be any folder writable by Tor.&lt;/p&gt;

&lt;p&gt;The second line can be unpicked a bit more:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HiddenServicePort 80&lt;/code&gt; means that Tor will proxy to this virtual port. You could change it but I can’t think of many use cases where you’d need to so I’d stick with the standard configuration.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt; specifies proxying internal connections. When we set up the web server this means it will proxy the sites we set up through Tor.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:7658&lt;/code&gt; This is the internal port we’re proxying. My web server is set to use this port. You can change this but your web server will need setting up to be the same as whatever you choose here.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+x&lt;/code&gt; to exit and save.&lt;/p&gt;

&lt;p&gt;Now restart Tor&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo service tor restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Providing everything worked and Tor restarted it will have created some files in the /var/lib/tor/hidden_service/ folder.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;private_key&lt;/code&gt; is the private key pair and you should back this up and shouldn’t share it with anyone. You shouldn’t need to interact with this file though.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hostname&lt;/code&gt; is your onion address, e.g. duskgytldkxiuqc6.onion. This is the address you’ll put into Tor browser to visit your site.&lt;/p&gt;

&lt;p&gt;The hidden_service folder is pretty locked down security wise (which is sensible) so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo cat /var/lib/tor/hidden_service/hostname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To display the onion address.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-a-webserver&quot;&gt;Setting up a Webserver&lt;/h2&gt;

&lt;p&gt;There’s more than one way of doing this. Tor doesn’t recommend Apache as it’s a very large, complex software with a lot of potential for misconfiguration and security leaks. In our use case - a home based DIY Raspberry Pi server - I’m not sure how significant this is. Still, I opted for lighttpd as it’s fairly simple and lightweight.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install lighttpd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I made some additional folders to structure multiple sites as follows. Replace foobar with whatever makes sense for your site name etc.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo mkdir /var/www/html
sudo mkdir /var/www/html/foobar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we change the owner and permissions of the folder and add pi to the www-data group.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chown -R www-data:www-data /var/www/html/foobar
sudo chmod 775 /var/www/html/foobar
sudo usermod -a -G www-data pi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now put your website files into the folder /var/www/html/foobar&lt;/p&gt;

&lt;p&gt;If you don’t have any files for this yet you could make a basic index.html page:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo '&amp;lt;h1&amp;gt;Hello, World!&amp;lt;/h1&amp;gt;' &amp;gt; /var/www/html/foobar/index.php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we need to edit the lighttpd config file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo nano /etc/lighttpd/lighttpd.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;change &lt;code class=&quot;highlighter-rouge&quot;&gt;server.document-root&lt;/code&gt; to (or whatever folder structure you chose):&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server.document-root        = &quot;/var/www/html&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and change &lt;code class=&quot;highlighter-rouge&quot;&gt;server.port&lt;/code&gt; to the following (or whatever port you chose in the torrc config above):&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server.port                 = 7658
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we’re going to add our website as a virtual host. The main reason is so that we can add other sites later if we want to. Add the following lines:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$HTTP[&quot;host&quot;] == &quot;duskgytldkxiuqc6.onion&quot; {
      server.document-root = &quot;/var/www/html/foobar&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;duskgytldkxiuqc6.onion&lt;/code&gt; is whatever onion address you got earlier.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;server.document-root&lt;/code&gt; should point to whichever folder you created earlier and put your web files in.&lt;/p&gt;

&lt;p&gt;now restart lighttpd:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo service lighttpd restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;opening-ports-and-testing-it-all&quot;&gt;Opening Ports and Testing it All&lt;/h2&gt;

&lt;p&gt;Everything should now be setup but our firewall should be blocking access so we need to open up a hole in ufw.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo ufw allow 7658
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should be it, the site doesn’t need to be accessible any way other than via Tor so no other ports should need opening (though you probably opened up port 22 in the Raspberry Pi setup so as you can SSH. Make sure you keep this port open or you won’t be able to login to your Pi).&lt;/p&gt;

&lt;p&gt;Lighttpd is serving your site locally but it isn’t accessible externally.&lt;/p&gt;

&lt;p&gt;Tor however is proxying this site and serving it as a hidden onion service.&lt;/p&gt;

&lt;p&gt;Visiting duskgytldkxiuqc6.onion (or whatever your equivalent is) in Tor browser from another computer should display your website.&lt;/p&gt;

&lt;p&gt;And that’s it really. I hope it works for you as it did for me.&lt;/p&gt;</content><author><name>Murray Royston-Ward</name></author><summary type="html">A rough guide to setting up a Tor hidden service, on a Raspberry Pi, at home.</summary></entry><entry><title type="html">Hello World</title><link href="http://localhost:4000/welcome-to-jekyll/" rel="alternate" type="text/html" title="Hello World" /><published>2017-12-05T02:50:25+00:00</published><updated>2017-12-05T02:50:25+00:00</updated><id>http://localhost:4000/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/welcome-to-jekyll/">&lt;p&gt;Obligatory first post. Portfolio and more to follow.&lt;/p&gt;</content><author><name>Murray Royston-Ward</name></author><summary type="html">Obligatory first post. Portfolio and more to follow.</summary></entry></feed>